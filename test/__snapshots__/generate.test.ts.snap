// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches snapshots with config 1`] = `
Array [
  "export enum SolidProfileShapeType {
  SchemPerson = \\"http://schema.org/Person\\",
  FoafPerson = \\"http://xmlns.com/foaf/0.1/Person\\",
}

export enum EmailShapeType {
  Dom = \\"http://www.w3.org/2006/vcard/ns#Dom\\",
  Home = \\"http://www.w3.org/2006/vcard/ns#Home\\",
  Isdn = \\"http://www.w3.org/2006/vcard/ns#ISDN\\",
  Internet = \\"http://www.w3.org/2006/vcard/ns#Internet\\",
  Intl = \\"http://www.w3.org/2006/vcard/ns#Intl\\",
  Label = \\"http://www.w3.org/2006/vcard/ns#Label\\",
  Parcel = \\"http://www.w3.org/2006/vcard/ns#Parcel\\",
  Postal = \\"http://www.w3.org/2006/vcard/ns#Postal\\",
  Pref = \\"http://www.w3.org/2006/vcard/ns#Pref\\",
  Work = \\"http://www.w3.org/2006/vcard/ns#Work\\",
  X400 = \\"http://www.w3.org/2006/vcard/ns#X400\\",
}

export enum PhoneNumberShapeType {
  Dom = \\"http://www.w3.org/2006/vcard/ns#Dom\\",
  Home = \\"http://www.w3.org/2006/vcard/ns#Home\\",
  Isdn = \\"http://www.w3.org/2006/vcard/ns#ISDN\\",
  Internet = \\"http://www.w3.org/2006/vcard/ns#Internet\\",
  Intl = \\"http://www.w3.org/2006/vcard/ns#Intl\\",
  Label = \\"http://www.w3.org/2006/vcard/ns#Label\\",
  Parcel = \\"http://www.w3.org/2006/vcard/ns#Parcel\\",
  Postal = \\"http://www.w3.org/2006/vcard/ns#Postal\\",
  Pref = \\"http://www.w3.org/2006/vcard/ns#Pref\\",
  Work = \\"http://www.w3.org/2006/vcard/ns#Work\\",
  X400 = \\"http://www.w3.org/2006/vcard/ns#X400\\",
}

export enum ModeType {
  Append = \\"http://www.w3.org/ns/auth/acl#Append\\",
  Control = \\"http://www.w3.org/ns/auth/acl#Control\\",
  Read = \\"http://www.w3.org/ns/auth/acl#Read\\",
  Write = \\"http://www.w3.org/ns/auth/acl#Write\\",
}

export type SolidProfileShape = {
  fn?: string; // The formatted name of a person. Example: John Smith
  name?: string; // An alternate way to define a person's name.
  hasAddress?: AddressShape | AddressShape[]; // The person's street address.
  hasEmail?: EmailShape | EmailShape[]; // The person's email.
  hasPhoto?: string; // A link to the person's photo
  img?: string; // Photo link but in string form
  hasTelephone?: PhoneNumberShape | PhoneNumberShape[]; // Person's telephone number
  phone?: string; // An alternative way to define a person's telephone number using a string
  organizationName?: string; // The name of the organization with which the person is affiliated
  role?: string; // The name of the person's role in their organization
  trustedApp?: TrustedAppShape | TrustedAppShape[]; // A list of app origins that are trusted by this user
  key?: RsaPublicKeyShape | RsaPublicKeyShape[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox?: string; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: string; // The user's preferences
  storage?: string | string[]; // The location of a Solid storage server related to this WebId
  account?: string; // The user's account
  privateTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for public access)
  knows?: string | string[]; // A list of WebIds for all the people this user knows.
} & {
  type?: (
    | SolidProfileShapeType.SchemPerson
    | SolidProfileShapeType.FoafPerson
  )[]; // Defines the node as a Person (from foaf)
};

export type AddressShape = {
  countryName?: string; // The name of the user's country of residence
  locality?: string; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string; // The user's postal code
  region?: string; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string; // The user's street address
};

export type EmailShape = {
  value?: string; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?: (
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400
  )[]; // The type of email.
};

export type PhoneNumberShape = {
  value?: string; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?: (
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400
  )[]; // They type of Phone Number
};

export type TrustedAppShape = {
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[][]; // The level of access provided to this origin
  origin?: string; // The app origin the user trusts
};

export type RsaPublicKeyShape = {
  modulus?: string; // RSA Modulus
  exponent?: string; // RSA Exponent
};
",
]
`;

exports[`matches snapshots without config 1`] = `
Array [
  "export enum SolidProfileShapeType {
  SchemPerson = \\"http://schema.org/Person\\",
  FoafPerson = \\"http://xmlns.com/foaf/0.1/Person\\",
}

export enum EmailShapeType {
  Dom = \\"http://www.w3.org/2006/vcard/ns#Dom\\",
  Home = \\"http://www.w3.org/2006/vcard/ns#Home\\",
  Isdn = \\"http://www.w3.org/2006/vcard/ns#ISDN\\",
  Internet = \\"http://www.w3.org/2006/vcard/ns#Internet\\",
  Intl = \\"http://www.w3.org/2006/vcard/ns#Intl\\",
  Label = \\"http://www.w3.org/2006/vcard/ns#Label\\",
  Parcel = \\"http://www.w3.org/2006/vcard/ns#Parcel\\",
  Postal = \\"http://www.w3.org/2006/vcard/ns#Postal\\",
  Pref = \\"http://www.w3.org/2006/vcard/ns#Pref\\",
  Work = \\"http://www.w3.org/2006/vcard/ns#Work\\",
  X400 = \\"http://www.w3.org/2006/vcard/ns#X400\\",
}

export enum PhoneNumberShapeType {
  Dom = \\"http://www.w3.org/2006/vcard/ns#Dom\\",
  Home = \\"http://www.w3.org/2006/vcard/ns#Home\\",
  Isdn = \\"http://www.w3.org/2006/vcard/ns#ISDN\\",
  Internet = \\"http://www.w3.org/2006/vcard/ns#Internet\\",
  Intl = \\"http://www.w3.org/2006/vcard/ns#Intl\\",
  Label = \\"http://www.w3.org/2006/vcard/ns#Label\\",
  Parcel = \\"http://www.w3.org/2006/vcard/ns#Parcel\\",
  Postal = \\"http://www.w3.org/2006/vcard/ns#Postal\\",
  Pref = \\"http://www.w3.org/2006/vcard/ns#Pref\\",
  Work = \\"http://www.w3.org/2006/vcard/ns#Work\\",
  X400 = \\"http://www.w3.org/2006/vcard/ns#X400\\",
}

export enum ModeType {
  Append = \\"http://www.w3.org/ns/auth/acl#Append\\",
  Control = \\"http://www.w3.org/ns/auth/acl#Control\\",
  Read = \\"http://www.w3.org/ns/auth/acl#Read\\",
  Write = \\"http://www.w3.org/ns/auth/acl#Write\\",
}

export type SolidProfileShape = {
  fn?: string; // The formatted name of a person. Example: John Smith
  name?: string; // An alternate way to define a person's name.
  hasAddress?: AddressShape | AddressShape[]; // The person's street address.
  hasEmail?: EmailShape | EmailShape[]; // The person's email.
  hasPhoto?: string; // A link to the person's photo
  img?: string; // Photo link but in string form
  hasTelephone?: PhoneNumberShape | PhoneNumberShape[]; // Person's telephone number
  phone?: string; // An alternative way to define a person's telephone number using a string
  organizationName?: string; // The name of the organization with which the person is affiliated
  role?: string; // The name of the person's role in their organization
  trustedApp?: TrustedAppShape | TrustedAppShape[]; // A list of app origins that are trusted by this user
  key?: RsaPublicKeyShape | RsaPublicKeyShape[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox?: string; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: string; // The user's preferences
  storage?: string | string[]; // The location of a Solid storage server related to this WebId
  account?: string; // The user's account
  privateTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for public access)
  knows?: string | string[]; // A list of WebIds for all the people this user knows.
} & {
  type?: (
    | SolidProfileShapeType.SchemPerson
    | SolidProfileShapeType.FoafPerson
  )[]; // Defines the node as a Person (from foaf)
};

export type AddressShape = {
  countryName?: string; // The name of the user's country of residence
  locality?: string; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string; // The user's postal code
  region?: string; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string; // The user's street address
};

export type EmailShape = {
  value?: string; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?: (
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400
  )[]; // The type of email.
};

export type PhoneNumberShape = {
  value?: string; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?: (
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400
  )[]; // They type of Phone Number
};

export type TrustedAppShape = {
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[][]; // The level of access provided to this origin
  origin?: string; // The app origin the user trusts
};

export type RsaPublicKeyShape = {
  modulus?: string; // RSA Modulus
  exponent?: string; // RSA Exponent
};
",
]
`;
